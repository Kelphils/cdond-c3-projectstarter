version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0

commands:
  destroy-environments:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${WORKFLOW_ID}
            aws s3 rm s3://udapeople-bucket-${WORKFLOW_ID}/ --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${WORKFLOW_ID}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl -sH "token: ${WORKFLOW_ID}" --request GET "https://api.memstash.io/values/migration_${WORKFLOW_ID}" | grep -c "has been executed successfully")
            if [ "$SUCCESS" == 1 ];
            then
              cd ./backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit front-end
          command: |
            cd frontend
            npm audit --audit-level=critical            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Audit back-end
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${WORKFLOW_ID} \
              --parameter-overrides ID=${WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${WORKFLOW_ID} \
              --parameter-overrides ID=${WORKFLOW_ID}  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text > .circleci/ansible/ec2-ip.txt
            cat .circleci/ansible/ec2-ip.txt >> .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies for persist_to_workspace
          command: yum -y install tar gzip
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
            - .circleci/ansible/ec2-ip.txt
      - destroy-environments      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies for attach_workspace
          command: apk add --update tar gzip
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: ["cd:f9:12:93:d3:03:ca:28:35:d0:0e:0c:5a:c8:79:ca"]
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
      - run:
          name: Install awscli
          when: on_fail
          command: |
            apk add --update curl && \
            apk add --update unzip && \
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
            unzip awscliv2.zip && \
            ./aws/install
      - destroy-environments     

  # run-migrations:
  #   docker:
      # Docker image here that supports NodeJS
    # steps:
      # Checkout code from git
      # - run:
      #     name: Run migrations
      #     command: |
      #       # Your code here
      #       exit 1
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       # Your code here
      #       exit 1
     # Here's where you will add some code to rollback on failure      

  # deploy-frontend:
  #   docker:
      # Docker image here that supports AWS CLI
    # steps:
      # Checkout code from git
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      #       export API_URL="http://${BACKEND_IP}:3030"
      #       echo "${API_URL}"
      # - run:
      #     name: Deploy frontend objects
      #     command: |
      #       # your code here
      # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
      # Docker image here that supports Ansible
    # steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      # - run:
      #     name: Deploy backend
      #     command: |
      #       # your code here
      # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
      # Lightweight Docker image 
    # steps:
      # Checkout code from git
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      # - run:
      #     name: Backend smoke test.
      #     command: |
      #       # your code here
      # - run:
      #     name: Frontend smoke test.
      #     command: |
      #       # your code here
      # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
      # Docker image here that supports AWS CLI
    # steps:
      # Checkout code from git
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      # - run:
      #     name: Update cloudfront distribution
      #     command: |
      #       # your code here
      # Here's where you will add some code to rollback on failure  

  # cleanup:
  #   docker:
      # Docker image here
    # steps:
      # Checkout code from git
      # - run:
      #     name: Get old stack workflow id
      #     command: |
      #       # your code here
      #       export OldWorkflowID="the id here"
      #       export STACKS=[] #put the list of stacks here
      # - run:
      #     name: Remove old stacks and files
      #     command: |
      #       if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
      #       then
      #         # your code here
      #       fi
            

workflows:
  default:
    jobs:
      # - build-backend:
      #     filters:
      #       branches:
      #         only: master
      # - build-frontend:
      #     filters:
      #       branches:
      #         only: master
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]