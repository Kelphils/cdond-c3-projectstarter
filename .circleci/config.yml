version: 2.1

orbs:
  aws-s3: circleci/aws-s3@2.0.0

commands:
  destroy-environments:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${WORKFLOW_ID}
            aws s3 rm s3://udapeople-${WORKFLOW_ID}/ --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${WORKFLOW_ID}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl -sH "token: ${WORKFLOW_ID}" --request GET "https://api.memstash.io/values/migration_${WORKFLOW_ID}" | grep -c "has been executed successfully")
            if [ "$SUCCESS" == 1 ];
            then
              cd ./backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Building front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: 
            - frontend/node_modules
            - frontend/dist
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Building back-end
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths:
            - /home/circleci/project/backend/node_modules
            - /home/circleci/project/backend/dist
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Testing front-end
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Testing back-end
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit front-end
          command: |
            cd frontend
            npm audit --audit-level=critical            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Auditing back-end
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
    - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensuring back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${WORKFLOW_ID} \
              --parameter-overrides ID=${WORKFLOW_ID}
      - run:
          name: Ensuring front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${WORKFLOW_ID} \
              --parameter-overrides ID=${WORKFLOW_ID}  
              
      - run:
          name: Adding back-end Ip to Ansible inventory and save to memstash
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${WORKFLOW_ID}" \
              --output text > .circleci/ansible/ec2-ip.txt
            cat .circleci/ansible/ec2-ip.txt >> .circleci/ansible/inventory.txt
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${WORKFLOW_ID}" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: ${WORKFLOW_ID}" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/udapeople_backend_url
            
      - run:
          name: Installing dependencies for persist_to_workspace
          command: yum -y install tar gzip
      - run:
          name: View content of files
          command: |
            cat .circleci/ansible/ec2-ip.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
            - .circleci/ansible/ec2-ip.txt
      - destroy-environments      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Installing dependencies for attach_workspace
          command: apk add --update tar gzip
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: ["cd:f9:12:93:d3:03:ca:28:35:d0:0e:0c:5a:c8:79:ca"]
      - run:
          name: Installing Ansible
          command: |
            apk add --update ansible
            ansible-galaxy install weareinteractive.environment
      - run:
          name: Configuring Server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt -v
      - run:
          name: Installing awsCli
          when: on_fail
          command: |
            apk add --update curl && \
            apk add --update unzip && \
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
            unzip awscliv2.zip && \
            ./aws/install
      - destroy-environments     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: sudo apt-get install -y tar gzip curl
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          working_directory: backend
          command: |
            npm run migrations > migrations-result.txt
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: ${WORKFLOW_ID}" --request PUT --data `cat ./backend/migrations-result.txt` https://api.memstash.io/values/migration_${WORKFLOW_ID}
      - run:
          when: on_fail
          command: sudo apt-get update && sudo apt-get install -y awscli curl grep
      - revert-migrations
      - destroy-environments      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: sudo apt-get install -y tar gzip
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: sudo apt-get update && sudo apt-get install -y grep
      - run:
          name: Building front-end with baked-in API_URL
          command: |
            export API_URL="http://`cat .circleci/ansible/ec2-ip.txt`:3030" && \
            cd ./frontend && \
            npm run build
      - aws-s3/copy:
          arguments: "--recursive"
          from: ./frontend/dist
          to: "s3://udapeople-${WORKFLOW_ID}"
      - run:
          when: on_fail
          command: sudo apt-get update && sudo apt-get install -y awscli curl
      - revert-migrations
      - destroy-environments     
                    
  deploy-backend:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cd:f9:12:93:d3:03:ca:28:35:d0:0e:0c:5a:c8:79:ca"]
      - attach_workspace:
          at: .
      - restore_cache:
          keys: 
            - backend-build
      - run:
          name: Installing Ansible
          command: | 
            apk add --update ansible
            ansible-galaxy install weareinteractive.environment
      - run:
          name: zip backend
          command: tar -C backend -czvf artifact.tar.gz .
      - run:
          name: Deploy backend
          command: |
            ansible-playbook .circleci/ansible/deploy-backend.yml -i .circleci/ansible/inventory.txt -v
      - run:
          name: Install awscli
          when: on_fail
          command: |
            apk add --update curl && \
            apk add --update unzip && \
            apk add --update grep && \
            apk add --update nodejs npm && \
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
            unzip awscliv2.zip && \
            ./aws/install
      - revert-migrations
      - destroy-environments  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep -q "Welcome"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: ${WORKFLOW_ID}" --request GET https://api.memstash.io/values/udapeople_backend_url)
            URL="$BACKEND_IP/api/status"
            echo $URL
            curl -v "${URL}"
            if curl -s "${URL}" | grep ok
            then
              return 0
            else
              return 1
            fi 
      - revert-migrations
      - destroy-environments

  cloudfront-update:
    docker:
    - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum -y install curl
      - run:
          name: Store previous workflow ID to Memstash
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            echo "OldWorkflowID=$OldWorkflowID"
            curl -sH "token: ${WORKFLOW_ID}" -H "Content-Type: text/plain" --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/old_stacks_${WORKFLOW_ID}
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name udapeople-cloudfront-${WORKFLOW_ID} \
              --parameter-overrides WorkflowID=${WORKFLOW_ID} 
      - revert-migrations
      - destroy-environments

  cleanup:
    docker:
    - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl -sH "token: ${WORKFLOW_ID}" --request GET https://api.memstash.io/values/old_stacks_${WORKFLOW_ID})
            echo "OldWorkflowID=$OldWorkflowID"
            if [ ! -z $OldWorkflowID ]
            then
              aws cloudformation delete-stack --stack-name "udapeople-backend-$OldWorkflowID"
              aws s3 rm "s3://udapeople-$OldWorkflowID/" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-$OldWorkflowID"
            else
              echo "No stacks to delete"
            fi
            

workflows:
  default:
    jobs:
      - build-backend:
          filters:
            branches:
              only: master
      - build-frontend:
          filters:
            branches:
              only: master
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]